/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ujitha;

import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author Ujitha
 */
public class Invoice extends javax.swing.JFrame {

    /**
     * Creates new form Voucher
     */
    public Invoice() {
        initComponents();
        startup();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane2 = new javax.swing.JScrollPane();
        tMain = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtInvoiceID = new javax.swing.JTextField();
        txtContactID = new javax.swing.JTextField();
        txtContactName = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        txtInvoiceNo = new javax.swing.JTextField();
        txtDate = new com.toedter.calendar.JDateChooser();
        lblTotalAmount = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        txtRemain = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        txtFnlSettled = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        txtDesc = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtMeterialID = new javax.swing.JTextField();
        txtMeterialName = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        txtMeterialRate = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtMeterialQty = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jButton10 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        lblInvoiceStatus = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tPrevious = new javax.swing.JTable();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jLabel23 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        txtSettledCount = new javax.swing.JTextField();
        txtSettledAmount = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        tSettled = new javax.swing.JTable();
        jButton8 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tBatch = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Invoice");
        setBackground(new java.awt.Color(153, 204, 255));
        setResizable(false);

        tMain.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item ID", "Item Name", "Quantity", "Rate", "Total", "Cost", "profit"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tMain.setToolTipText("duplicate row adding enable");
        tMain.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tMainKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(tMain);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Main Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel2.setText("Date");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel3.setText("Invoice ID");

        txtInvoiceID.setEditable(false);
        txtInvoiceID.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N

        txtContactID.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        txtContactID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtContactIDActionPerformed(evt);
            }
        });
        txtContactID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtContactIDKeyReleased(evt);
            }
        });

        txtContactName.setEditable(false);
        txtContactName.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel9.setText("Name");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel4.setText("NIC");

        jLabel19.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel19.setText("Invoice No");

        txtInvoiceNo.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N

        txtDate.setDateFormatString("yyyy-MM-dd");
        txtDate.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtInvoiceID)
                            .addComponent(txtDate, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addGap(18, 18, 18)
                        .addComponent(txtInvoiceNo, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtContactID)
                    .addComponent(txtContactName, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtInvoiceID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(txtContactID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtInvoiceNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19)
                    .addComponent(jLabel9)
                    .addComponent(txtContactName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        lblTotalAmount.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblTotalAmount.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblTotalAmount.setText("0000");

        jLabel21.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel21.setLabelFor(txtRemain);
        jLabel21.setText("Remain Amount");

        txtRemain.setEditable(false);
        txtRemain.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        txtRemain.setText("0");

        jLabel22.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel22.setText("Settled Voucher Amount");

        txtFnlSettled.setEditable(false);
        txtFnlSettled.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        txtFnlSettled.setText("0");
        txtFnlSettled.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFnlSettledActionPerformed(evt);
            }
        });

        jLabel24.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel24.setText("Total Amount");

        jLabel20.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel20.setText("Description");

        txtDesc.setColumns(20);
        txtDesc.setRows(5);
        jScrollPane5.setViewportView(txtDesc);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Item details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(500, 145));

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel5.setText("Item ID");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel6.setText("Item Name");

        txtMeterialID.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        txtMeterialID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMeterialIDActionPerformed(evt);
            }
        });
        txtMeterialID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtMeterialIDKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMeterialIDKeyTyped(evt);
            }
        });

        txtMeterialName.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jButton1.setText("Add");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        txtMeterialRate.setEditable(false);
        txtMeterialRate.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        txtMeterialRate.setText("0");

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel11.setText("QTY");

        txtMeterialQty.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        txtMeterialQty.setText("0");
        txtMeterialQty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMeterialQtyActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel10.setText("Rate");

        jButton10.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jButton10.setText("change");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtMeterialID, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                    .addComponent(txtMeterialName))
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtMeterialRate, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtMeterialQty, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(txtMeterialID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtMeterialName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtMeterialRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)
                            .addComponent(jButton10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(txtMeterialQty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1))
        );

        jPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jButton4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton4.setText("Complete");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jButton5.setText("Clear");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton9.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jButton9.setText("Cancel");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        lblInvoiceStatus.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblInvoiceStatus.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblInvoiceStatus.setText("no");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(lblInvoiceStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblInvoiceStatus))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Incomplete Vouchers"));

        tPrevious.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Voucher ID", "Voucher No", "Date", "Remain Amount", "Total Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tPrevious);

        jButton6.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jButton6.setText("OK");
        jButton6.setEnabled(false);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jButton7.setText("Settle");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jLabel23.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel23.setText("no of Settled Vouchers");

        jLabel25.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel25.setText("Total Settled Amount");

        txtSettledCount.setEditable(false);
        txtSettledCount.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        txtSettledCount.setText("0");

        txtSettledAmount.setEditable(false);
        txtSettledAmount.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        txtSettledAmount.setText("0");

        tSettled.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Voucher ID", "Voucher No", "Amount", "Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tSettled.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tSettledKeyPressed(evt);
            }
        });
        jScrollPane4.setViewportView(tSettled);

        jButton8.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jButton8.setText("Refresh");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGap(0, 35, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel25, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel23, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtSettledAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtSettledCount, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton7)
                    .addComponent(jButton8))
                .addGap(31, 31, 31)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSettledCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSettledAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel25))
                .addGap(18, 18, 18)
                .addComponent(jButton6)
                .addContainerGap())
        );

        tBatch.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "itemID", "qty", "batchNo", "bprice", "cost", "sprice"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tBatch);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel20)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(66, 66, 66)
                                .addComponent(jLabel24)
                                .addGap(18, 18, 18)
                                .addComponent(lblTotalAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel21)
                                    .addComponent(jLabel22))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtFnlSettled)
                                    .addComponent(txtRemain))))
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 561, Short.MAX_VALUE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 504, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel20)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTotalAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel24))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtFnlSettled, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel22))
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel21)
                            .addComponent(txtRemain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtMeterialIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMeterialIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMeterialIDActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        clear();

    }//GEN-LAST:event_jButton5ActionPerformed
    double maintot;
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {

            double cost = 0;
            double profit = 0;
            double tot = 0;
            
            DefaultTableModel maine = (DefaultTableModel) tMain.getModel();
             DefaultTableModel batcht = (DefaultTableModel) tBatch.getModel();
            if (main.Stock.getQty(txtMeterialID.getText()) >= Integer.parseInt(txtMeterialQty.getText())) {
             Statement s = main.DB.con().createStatement();
             ResultSet rs = s.executeQuery("SELECT `batchNo` ,`qty`,`bprice` FROM "
                     + "`sanasa`.`stock` WHERE `Inventory_id`='"+txtMeterialID.getText()+"'"
                     + " AND `qty` != '0' ORDER BY `batchNo` ASC");
            
             int requiredQty = Integer.parseInt(txtMeterialQty.getText()) ;
             while (rs.next()) {
                 if (requiredQty > rs.getInt(2)) {                     
                     Vector v1 = new Vector();
                     v1.add(txtMeterialID.getText());
                     v1.add(rs.getInt(2));
                     v1.add(rs.getInt(1));
                     v1.add(rs.getInt(3));
                     v1.add(rs.getInt(3)*rs.getInt(2));
                     v1.add(txtMeterialRate.getText());
                     
                     requiredQty -= rs.getInt(2) ;
                     batcht.addRow(v1);
                     
                 }else if ((requiredQty <= rs.getInt(2)) && (requiredQty!=0)) {
                      Vector v1 = new Vector();
                     v1.add(txtMeterialID.getText());
                     v1.add(requiredQty);
                     v1.add(rs.getInt(1));
                     v1.add(rs.getInt(3));
                     v1.add(rs.getInt(3)*rs.getInt(2));
                      v1.add(txtMeterialRate.getText());
                     
                     requiredQty = 0 ;
                     batcht.addRow(v1);
                     break ;
                 }else {
                   JOptionPane.showMessageDialog(this, "Invalid Quantity !", "error" , JOptionPane.WARNING_MESSAGE);
                   break;
                 }
                
            }
           
             
            Vector v = new Vector();
            v.add(txtMeterialID.getText());
            v.add(txtMeterialName.getText());
            v.add(txtMeterialQty.getText());
            v.add(txtMeterialRate.getText());

            v.add(Double.parseDouble(txtMeterialQty.getText()) * Double.parseDouble(txtMeterialRate.getText()));
            tot = Double.parseDouble(txtMeterialQty.getText()) * Double.parseDouble(txtMeterialRate.getText());
            try {
             
               
                   
                    for (int i = 0; i < batcht.getRowCount(); i++) {
                        cost += Double.parseDouble(batcht.getValueAt(i, 4).toString());
                    }
                    v.add(cost);
                    profit = tot - cost;

                    v.add(profit);
                    maine.addRow(v);

                    txtMeterialID.setText(null);
                    txtMeterialName.setText(null);
                    txtMeterialRate.setText(null);
                    txtMeterialQty.setText(null);
                    maintot = 0;
                    for (int i = 0; i < maine.getRowCount(); i++) {
                        maintot += Double.parseDouble(maine.getValueAt(i, 4).toString());
                    }
                    lblTotalAmount.setText(maintot + "");

                    txtRemain.setText(maintot + "");
                

            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error");
                e.printStackTrace();
            }

                } else {
                    JOptionPane.showMessageDialog(this, "Current Stock is not enough !");
                }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Adding this record incomplete."
                    + "\nRow is not added to the table", "Incomplete", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
 String ind = ((JTextField) txtDate.getDateEditor().getUiComponent()).getText();
        DefaultTableModel maint = (DefaultTableModel) tMain.getModel();
        DefaultTableModel setttledt = (DefaultTableModel) tSettled.getModel();
        DefaultTableModel batcht = (DefaultTableModel) tBatch.getModel();

        try {
            Statement s = main.DB.con().createStatement();
            Statement s1 = main.DB.con().createStatement();
            Statement s2 = main.DB.con().createStatement();
            Statement s3 = main.DB.con().createStatement();
            Statement s4 = main.DB.con().createStatement();
            Statement s5 = main.DB.con().createStatement();
            Statement s6 = main.DB.con().createStatement();
            Statement s7 = main.DB.con().createStatement();
          Statement s8 = main.DB.con().createStatement();


            double tcost = 0, tprofit = 0;

            for (int i = 0; i < maint.getRowCount(); i++) {
                tcost += Double.parseDouble(maint.getValueAt(i, 5).toString());
                tprofit += Double.parseDouble(maint.getValueAt(i, 6).toString());
            }

            // insert to Invoice
            s.executeUpdate("INSERT INTO `sanasa`.`invoice` (`auto_id`,`no`,"
                    + "`Contact_nic`,`date`,`time`,`maintotal`,`cost`,`status`,"
                    + "`balance`,`profit`) VALUES ('" + txtInvoiceID.getText() + "', "
                    + "'" + txtInvoiceNo.getText() + "','" + txtContactID.getText() + "',"
                    + "'" + ind + "','" + main.Date_Time.getTime() + "',"
                    + "'" + lblTotalAmount.getText() + "','" + tcost + "','no','" + lblTotalAmount.getText() + "',"
                    + "'" + tprofit + "')");

            // main table inserting
            for (int i = 0; i < maint.getRowCount(); i++) {

                // inserting to Invoice details
                s1.executeUpdate("INSERT INTO `sanasa`.`invoice_details` VALUES"
                        + " ('" + maint.getValueAt(i, 0).toString() + "',"
                        + "'" + txtInvoiceID.getText() + "','" + maint.getValueAt(i, 3).toString() + "',"
                        + "'" + maint.getValueAt(i, 2).toString() + "','" + maint.getValueAt(i, 6).toString() + "',"
                        + "'" + maint.getValueAt(i, 5).toString() + "','" + maint.getValueAt(i, 4).toString() + "',"
                        + "'none')  ");
                
                 // Updating Stock for price change
                s8.executeUpdate("UPDATE `sanasa`.`stock` SET "
                        + " `sprice` = '" + maint.getValueAt(i, 3).toString() + "',"
                        + "`Date` = '" + ind+ "',`time` = '" + main.Date_Time.getTime() + "'"
                        + " WHERE `Inventory_id` = '" + maint.getValueAt(i, 0).toString() + "'");
            }
            // batch table
            for (int i = 0; i < batcht.getRowCount(); i++) {
                
                // insert to invoice batch
                 s3.executeUpdate("INSERT INTO `sanasa`.`invoice_batch` VALUES "
                         + "('" + batcht.getValueAt(i, 0).toString() + "',"
                         + "'" + txtInvoiceID.getText() + "','" + batcht.getValueAt(i, 1).toString() + "',"
                         + "'" + batcht.getValueAt(i, 0).toString() + "',"
                         + "'" + batcht.getValueAt(i, 2).toString() + "')");
                 
                // Updating Stock
                s2.executeUpdate("UPDATE `sanasa`.`stock` SET `qty` = `qty`-'"+batcht.getValueAt(i, 1).toString()+"',"
                        + " `sprice` = '" + batcht.getValueAt(i, 5).toString() + "',"
                        + "`Date` = '" + ind+ "',`time` = '" + main.Date_Time.getTime() + "'"
                        + " WHERE `Inventory_id` = '" + batcht.getValueAt(i, 0).toString() + "' "
                        + "and `batchNo`='"+batcht.getValueAt(i, 2).toString()+"'");
            
            }


            // inserting to personal Accounts
            double newBalance = main.Personal_Accounts.getBalance(txtContactID.getText()) - Double.parseDouble(lblTotalAmount.getText());
            s4.executeUpdate("INSERT INTO `sanasa`.`personal_account` VALUES"
                    + " ('0','" + txtContactID.getText() + "','" + main.Date_Time.getDate() + "',"
                    + "'" + main.Date_Time.getTime() + "','" + newBalance + "','" + txtInvoiceID.getText() + "',"
                    + "'invoice','credit','" + (main.Personal_Accounts.getSequence() + 1) + "'"
                    + " , '" + txtDesc.getText() + "')");

            JOptionPane.showMessageDialog(this, "Invoice Successfully added !");
            if (Double.parseDouble(txtFnlSettled.getText()) > 0) {
                // update Invoice 
                s5.executeUpdate("UPDATE `sanasa`.`invoice` SET `status` = '" + lblInvoiceStatus.getText() + "',"
                        + "`balance` = '" + txtRemain.getText() + "',`mod_Date` = '" + main.Date_Time.getDate() + "',"
                        + "`mod_Time` = '" + main.Date_Time.getTime() + "' "
                        + "WHERE `auto_id` = '" + txtInvoiceID.getText() + "'");

                for (int i = 0; i < setttledt.getRowCount(); i++) {

                    // Insert to invoice_pays_voucher
                    s6.executeUpdate("INSERT INTO `sanasa`.`invoice_pays_voucher`"
                            + " VALUES ('" + txtInvoiceID.getText() + "',"
                            + "'" + setttledt.getValueAt(i, 0).toString() + "',"
                            + "'" + setttledt.getValueAt(i, 2).toString() + "',"
                            + "'" + main.Date_Time.getDate() + "','" + main.Date_Time.getTime() + "')");

                    if (setttledt.getValueAt(i, 3).toString().equals("full")) {

                        // update voucher
                        s6.executeUpdate("UPDATE `sanasa`.`voucher` SET `Balance` = '0',"
                                + "`Status` = 'yes' WHERE `auto_id` = "
                                + "'" + setttledt.getValueAt(i, 0).toString() + "'");

                    } else if (setttledt.getValueAt(i, 3).toString().equals("half")) {

                        // update voucher
                        s7.executeUpdate(" UPDATE `sanasa`.`voucher` SET `Balance`"
                                + " = `Balance`-'" + Double.parseDouble(setttledt.getValueAt(i, 2).toString()) + "',"
                                + "`Status` = 'no' WHERE `auto_id` = '" + setttledt.getValueAt(i, 0).toString() + "'");

                    }
                }
                JOptionPane.showMessageDialog(this,
                        "Invoice Successfully added and Voucher Settlement(s)  done ! ",
                        "Complete", JOptionPane.INFORMATION_MESSAGE);
            }

//        
            clear();
            startup();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "error");
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void txtContactIDKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtContactIDKeyReleased
        try {
            Statement st = main.DB.con().createStatement();
            ResultSet rs = st.executeQuery("SELECT `name` FROM `sanasa`.`contact`"
                    + " WHERE `nic`='" + txtContactID.getText() + "'");

            if (rs.next()) {
                txtContactName.setText(rs.getString(1));
            }
            loadTable();
        } catch (Exception ex) {
            ex.printStackTrace();
    }//GEN-LAST:event_txtContactIDKeyReleased
    }
    private void txtMeterialIDKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMeterialIDKeyReleased
        try {

            Statement st = main.DB.con().createStatement();
            Statement st1 = main.DB.con().createStatement();
            ResultSet rs = st.executeQuery("SELECT `name`,`subname`,`type` FROM "
                    + "`sanasa`.`inventory` WHERE `id`='" + txtMeterialID.getText() + "'");

            ResultSet rs1 = st1.executeQuery("SELECT `sprice` FROM "
                    + "`sanasa`.`stock` WHERE `Inventory_id`='" + txtMeterialID.getText() + "'");
            if (rs.next()) {
                txtMeterialName.setText(rs.getString(1) + "-" + rs.getString(2) + "-" + rs.getString(3));
            }
            if (rs1.next()) {
                txtMeterialRate.setText(rs1.getString(1));
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_txtMeterialIDKeyReleased

    private void txtContactIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtContactIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtContactIDActionPerformed

    private void tMainKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tMainKeyReleased
        DefaultTableModel dtm = (DefaultTableModel) tMain.getModel();
         DefaultTableModel dtm1 = (DefaultTableModel) tBatch.getModel();
        try {
            if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
                lblTotalAmount.setText((Double.parseDouble(lblTotalAmount.getText())
                        - Double.parseDouble(dtm.getValueAt(tMain.getSelectedRow(), 4).toString())) + "");

//               maintot = maintot - Double.parseDouble(dtm.getValueAt(tMain.getSelectedRow(), 4).toString());
                for (int i = 0; i < dtm1.getRowCount(); i++) {
                    if (dtm.getValueAt(tMain.getSelectedRow(), 0).toString().equals(dtm1.getValueAt(i, 0).toString())) {
                        dtm1.removeRow(i);
                    }
                }
                dtm.removeRow(tMain.getSelectedRow());
                setUnbalance();
                
                
                
                
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Row can't be deleted !");
            e.printStackTrace();
        }
    }//GEN-LAST:event_tMainKeyReleased

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        dispose();
    }//GEN-LAST:event_jButton9ActionPerformed

    private void txtFnlSettledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFnlSettledActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFnlSettledActionPerformed

    private void txtMeterialIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMeterialIDKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMeterialIDKeyTyped

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        try {
            if (JOptionPane.showConfirmDialog(this, "Are you Sure ?", "Confirm", JOptionPane.OK_CANCEL_OPTION) == 0) {
                if (Double.parseDouble(lblTotalAmount.getText()) >= Double.parseDouble(txtSettledAmount.getText())) {
                    txtFnlSettled.setText(txtSettledAmount.getText());
                    if (!jButton5.isEnabled()) {
                        jButton5.setEnabled(true);
                    }
                    setUnbalance();
                    if (Double.parseDouble(txtRemain.getText()) == 0) {
                        lblInvoiceStatus.setText("ok");
                    } else if (Double.parseDouble(txtRemain.getText()) > 0) {
                        lblInvoiceStatus.setText("no");
                    } else {
                        lblInvoiceStatus.setText("error");
                    }


                } else {
                    JOptionPane.showMessageDialog(this, "Invoice Not enough !. Vouchers are Over Settled !");
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error");
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        try {
            DefaultTableModel settle = (DefaultTableModel) tPrevious.getModel();
            DefaultTableModel settled = (DefaultTableModel) tSettled.getModel();
            String voucherNo = settle.getValueAt(tPrevious.getSelectedRow(), 0).toString();
            String amount = JOptionPane.showInputDialog(this, "Voucher ID : " + voucherNo,
                    "Enter settling amount", JOptionPane.QUESTION_MESSAGE);
            if (amount.isEmpty()) {
                throw new NumberFormatException();
            }
            Vector v = new Vector();
            v.add(settle.getValueAt(tPrevious.getSelectedRow(), 0));
            v.add(settle.getValueAt(tPrevious.getSelectedRow(), 1));
            v.add(amount);

            if (Double.parseDouble(settle.getValueAt(tPrevious.getSelectedRow(), 3).toString()) == Double.parseDouble(amount)) {
                v.add("full");
            } else if (Double.parseDouble(settle.getValueAt(tPrevious.getSelectedRow(), 3).toString()) > Double.parseDouble(amount)) {
                v.add("half");
            } else {

                v.add("Over paid");
                throw new Exception();
            }

            settled.addRow(v);

            txtSettledCount.setText(settled.getRowCount() + "");
            double tot = 0;
            for (int i = 0; i < settled.getRowCount(); i++) {
                tot += Double.parseDouble(settled.getValueAt(i, 2).toString());
            }
            txtSettledAmount.setText(tot + "");
            if (Double.parseDouble(txtSettledAmount.getText()) > 0) {
                jButton6.setEnabled(true);
            }
            settle.removeRow(tPrevious.getSelectedRow());
        } catch (java.lang.NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please Enter Valid Amount !");
            e.printStackTrace();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Over Paid Invoice ! try again later");
            e.printStackTrace();
        }

    }//GEN-LAST:event_jButton7ActionPerformed

    private void tSettledKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tSettledKeyPressed
        DefaultTableModel dtm = (DefaultTableModel) tSettled.getModel();
        try {
            if (evt.getKeyCode() == KeyEvent.VK_DELETE) {

                txtSettledAmount.setText((Double.parseDouble(txtSettledAmount.getText())
                        - Double.parseDouble(dtm.getValueAt(tSettled.getSelectedRow(), 2).toString())) + "");

                txtFnlSettled.setText((Double.parseDouble(txtFnlSettled.getText())
                        - Double.parseDouble(dtm.getValueAt(tSettled.getSelectedRow(), 2).toString())) + "");

                txtSettledCount.setText((Integer.parseInt(txtSettledCount.getText()) - 1) + "");
                dtm.removeRow(tSettled.getSelectedRow());
                if (Double.parseDouble(txtSettledAmount.getText()) == 0) {
                    jButton6.setEnabled(false);
                }
                setUnbalance();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error");
            e.printStackTrace();
        }
    }//GEN-LAST:event_tSettledKeyPressed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        loadTable();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Are you Sure ?" , "Confirm" , JOptionPane.OK_CANCEL_OPTION) == 0) {
            String pamount = JOptionPane.showInputDialog(this,"Enter New Buying Price :", JOptionPane.QUESTION_MESSAGE);

            txtMeterialRate.setText(pamount);
          

        }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void txtMeterialQtyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMeterialQtyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMeterialQtyActionPerformed
    /**
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Invoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Invoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Invoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Invoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Invoice().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel lblInvoiceStatus;
    private javax.swing.JLabel lblTotalAmount;
    private javax.swing.JTable tBatch;
    private javax.swing.JTable tMain;
    private javax.swing.JTable tPrevious;
    private javax.swing.JTable tSettled;
    private javax.swing.JTextField txtContactID;
    private javax.swing.JTextField txtContactName;
    private com.toedter.calendar.JDateChooser txtDate;
    private javax.swing.JTextArea txtDesc;
    private javax.swing.JTextField txtFnlSettled;
    private javax.swing.JTextField txtInvoiceID;
    private javax.swing.JTextField txtInvoiceNo;
    private javax.swing.JTextField txtMeterialID;
    private javax.swing.JTextField txtMeterialName;
    private javax.swing.JTextField txtMeterialQty;
    private javax.swing.JTextField txtMeterialRate;
    private javax.swing.JTextField txtRemain;
    private javax.swing.JTextField txtSettledAmount;
    private javax.swing.JTextField txtSettledCount;
    // End of variables declaration//GEN-END:variables

    private void clear() {
        txtFnlSettled.setText(null);

        txtContactID.setText(null);
        txtContactName.setText(null);
        txtInvoiceID.setText(null);
        txtInvoiceNo.setText(null);
        txtMeterialID.setText(null);
        txtMeterialName.setText(null);
        txtMeterialRate.setText(null);
        txtMeterialQty.setText(null);
        txtSettledCount.setText(null);
        txtSettledAmount.setText(null);
        txtRemain.setText(null);
        lblTotalAmount.setText("0000");

        DefaultTableModel main = (DefaultTableModel) tMain.getModel();
        DefaultTableModel previous = (DefaultTableModel) tPrevious.getModel();
        DefaultTableModel settle = (DefaultTableModel) tSettled.getModel();
        DefaultTableModel batcht = (DefaultTableModel) tBatch.getModel();
        main.setRowCount(0);
        previous.setRowCount(0);
        settle.setRowCount(0);
        batcht.setRowCount(0);
    }
    ArrayList<String> id, name, itemId, itemName;

    private void startup() {


        id = new ArrayList<String>();
        name = new ArrayList<String>();
        itemId = new ArrayList<String>();
        itemName = new ArrayList<String>();

        try {
            Statement s = main.DB.con().createStatement();
            Statement s1 = main.DB.con().createStatement();
            Statement s2 = main.DB.con().createStatement();


            ResultSet rs5 = s.executeQuery("SELECT `auto_id`  FROM `sanasa`.`invoice` ORDER BY `auto_id` desc");
            int vid = 0;
            if (rs5.next()) {
                vid = Integer.parseInt(rs5.getString(1).substring(3));
            }
            vid++;
            txtInvoiceID.setText("INV"+vid);
            ResultSet rs = s1.executeQuery("SELECT `nic`,`name` FROM `sanasa`.`contact`");
            while (rs.next()) {
                id.add(rs.getString(1));
                name.add(rs.getString(2));
            }

            ResultSet rs2 = s2.executeQuery("SELECT `id`,`name`,`subname`,`type` FROM `sanasa`.`inventory`");
            while (rs2.next()) {
                itemId.add(rs2.getString(1));
                itemName.add(rs2.getString(2) + "-" + rs2.getString(3) + "-" + rs2.getString(4));
            }


            main.AutoComplete.setupAutoComplete(txtContactID, id);
            main.AutoComplete.setupAutoComplete(txtContactName, name);
            main.AutoComplete.setupAutoComplete(txtMeterialID, itemId);
            main.AutoComplete.setupAutoComplete(txtMeterialName, itemName);

            TableColumn buying_pricex1 = tMain.getColumnModel().getColumn(6);
            buying_pricex1.setMinWidth(0);
            buying_pricex1.setMaxWidth(0);
            buying_pricex1.setWidth(0);

            TableColumn buying_pricex = tMain.getColumnModel().getColumn(5);
            buying_pricex.setMinWidth(0);
            buying_pricex.setMaxWidth(0);
            buying_pricex.setWidth(0);
//            
//             TableColumn buying_price1 = tBatch.getColumnModel().getColumn(0);
//            buying_price1.setMinWidth(0);
//            buying_price1.setMaxWidth(0);
//            buying_price1.setWidth(0);
//            
             TableColumn buying_price2 = tBatch.getColumnModel().getColumn(1);
            buying_price2.setMinWidth(0);
            buying_price2.setMaxWidth(0);
            buying_price2.setWidth(0);
            
            TableColumn buying_price3 = tBatch.getColumnModel().getColumn(2);
            buying_price3.setMinWidth(0);
            buying_price3.setMaxWidth(0);
            buying_price3.setWidth(0);
            
             TableColumn buying_price4 = tBatch.getColumnModel().getColumn(3);
            buying_price4.setMinWidth(0);
            buying_price4.setMaxWidth(0);
            buying_price4.setWidth(0);
            
             TableColumn buying_price5 = tBatch.getColumnModel().getColumn(4);
            buying_price5.setMinWidth(0);
            buying_price5.setMaxWidth(0);
            buying_price5.setWidth(0);
            
             TableColumn buying_price6 = tBatch.getColumnModel().getColumn(5);
            buying_price6.setMinWidth(0);
            buying_price6.setMaxWidth(0);
            buying_price6.setWidth(0);
            
           

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Auto Complete Loading Error");
            e.printStackTrace();
        }
    }

    private void loadTable() {
        DefaultTableModel dtm = (DefaultTableModel) tPrevious.getModel();
        dtm.setRowCount(0);

        String getInvoice = "SELECT `auto_id` , `date`,balance ,`maintotal`,no FROM "
                + "`sanasa`.`Voucher` WHERE `status`='no' AND `Contact_nic`='" + txtContactID.getText() + "'";

        try {
            Statement s1 = main.DB.con().createStatement();

            ResultSet rs = s1.executeQuery(getInvoice);
            while (rs.next()) {
                Vector v = new Vector();

                v.add(rs.getString(1));
                v.add(rs.getString(5));
                v.add(rs.getString(2));
                v.add(rs.getString(3));
                v.add(rs.getString(4));
                dtm.addRow(v);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
            e.printStackTrace();
        }

    }

    private void setUnbalance() {
        txtRemain.setText((Double.parseDouble(lblTotalAmount.getText())
                - Double.parseDouble(txtFnlSettled.getText())) + "");
    }
}
